package ca.ubc.stat.blang.tests;

import ca.ubc.stat.blang.tests.BlangDslInjectorProvider;
import com.google.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.TemporaryFolder;
import org.eclipse.xtext.junit4.XtextRunner;
import org.eclipse.xtext.xbase.compiler.CompilationTestHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(BlangDslInjectorProvider.class)
@SuppressWarnings("all")
public class BlangDslGeneratorTest {
  @Inject
  public TemporaryFolder temporaryFolder;
  
  @Inject
  @Extension
  private CompilationTestHelper _compilationTestHelper;
  
  @Test
  public void emptyParams() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model {");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("import blang.core.Model;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("@SuppressWarnings(\"all\")");
      _builder_1.newLine();
      _builder_1.append("public class MyFile implements Model {");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void randomParams() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("random Real mu");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("random Real y");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("import blang.core.Model;");
      _builder_1.newLine();
      _builder_1.append("import blang.prototype3.Real;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("@SuppressWarnings(\"all\")");
      _builder_1.newLine();
      _builder_1.append("public class MyFile implements Model {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public final Real mu;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public final Real y;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public MyFile(final Real mu, final Real y) {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("this.mu = mu;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("this.y = y;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void logFactor() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("param Real variance");
      _builder.newLine();
      _builder.append("    ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("const double LOG2PI = Math.log(2 * Math.PI)");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("laws {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("logf(variance) = -0.5 * ( Math.log(variance.doubleValue) + LOG2PI )");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("import blang.core.Model;");
      _builder_1.newLine();
      _builder_1.append("import blang.core.ModelComponent;");
      _builder_1.newLine();
      _builder_1.append("import blang.factors.LogScaleFactor;");
      _builder_1.newLine();
      _builder_1.append("import blang.prototype3.Real;");
      _builder_1.newLine();
      _builder_1.append("import java.util.ArrayList;");
      _builder_1.newLine();
      _builder_1.append("import java.util.Collection;");
      _builder_1.newLine();
      _builder_1.append("import java.util.function.Supplier;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("@SuppressWarnings(\"all\")");
      _builder_1.newLine();
      _builder_1.append("public class MyFile implements Model {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public final Supplier<Real> variance;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("final static double LOG2PI = Math.log((2 * Math.PI));");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public MyFile(final Supplier<Real> variance) {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("this.variance = variance;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public Collection<ModelComponent> components() {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("ArrayList<ModelComponent> components = new ArrayList();");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("components.add(new $Generated_LogScaleFactor0(variance));");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("return components;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public static class $Generated_LogScaleFactor0 implements LogScaleFactor {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("private final Supplier<Real> variance;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("public $Generated_LogScaleFactor0(final Supplier<Real> variance) {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("this.variance = variance;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("@Override");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("public double logDensity() {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("return $logDensity(variance.get());");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("private double $logDensity(final Real variance) {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("double _doubleValue = variance.doubleValue();");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("double _log = Math.log(_doubleValue);");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("double _plus = (_log + MyFile.LOG2PI);");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("return ((-0.5) * _plus);");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void logFactorMultiParam() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("param Real mean");
      _builder.newLine();
      _builder.append("    ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("param Real variance");
      _builder.newLine();
      _builder.append("    ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("laws {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("logf(variance, mean) = { -0.5 * mean.doubleValue / variance.doubleValue }");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("import blang.core.Model;");
      _builder_1.newLine();
      _builder_1.append("import blang.core.ModelComponent;");
      _builder_1.newLine();
      _builder_1.append("import blang.factors.LogScaleFactor;");
      _builder_1.newLine();
      _builder_1.append("import blang.prototype3.Real;");
      _builder_1.newLine();
      _builder_1.append("import java.util.ArrayList;");
      _builder_1.newLine();
      _builder_1.append("import java.util.Collection;");
      _builder_1.newLine();
      _builder_1.append("import java.util.function.Supplier;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("@SuppressWarnings(\"all\")");
      _builder_1.newLine();
      _builder_1.append("public class MyFile implements Model {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public final Supplier<Real> mean;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public final Supplier<Real> variance;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public MyFile(final Supplier<Real> mean, final Supplier<Real> variance) {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("this.mean = mean;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("this.variance = variance;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public Collection<ModelComponent> components() {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("ArrayList<ModelComponent> components = new ArrayList();");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("components.add(new $Generated_LogScaleFactor0(variance, mean));");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("return components;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public static class $Generated_LogScaleFactor0 implements LogScaleFactor {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("private final Supplier<Real> variance;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("private final Supplier<Real> mean;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("public $Generated_LogScaleFactor0(final Supplier<Real> variance, final Supplier<Real> mean) {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("this.variance = variance;");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("this.mean = mean;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("@Override");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("public double logDensity() {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("return $logDensity(variance.get(), mean.get());");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("private double $logDensity(final Real variance, final Real mean) {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("double _doubleValue = mean.doubleValue();");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("double _multiply = ((-0.5) * _doubleValue);");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("double _doubleValue_1 = variance.doubleValue();");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("return (_multiply / _doubleValue_1);");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void supportFactor() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("param Real variance");
      _builder.newLine();
      _builder.append("    ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("laws {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("indicator(variance) = variance.doubleValue > 0");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("import blang.core.Model;");
      _builder_1.newLine();
      _builder_1.append("import blang.core.ModelComponent;");
      _builder_1.newLine();
      _builder_1.append("import blang.core.SupportFactor;");
      _builder_1.newLine();
      _builder_1.append("import blang.prototype3.Real;");
      _builder_1.newLine();
      _builder_1.append("import java.util.ArrayList;");
      _builder_1.newLine();
      _builder_1.append("import java.util.Collection;");
      _builder_1.newLine();
      _builder_1.append("import java.util.function.Supplier;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("@SuppressWarnings(\"all\")");
      _builder_1.newLine();
      _builder_1.append("public class MyFile implements Model {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public final Supplier<Real> variance;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public MyFile(final Supplier<Real> variance) {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("this.variance = variance;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public Collection<ModelComponent> components() {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("ArrayList<ModelComponent> components = new ArrayList();");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("components.add(new SupportFactor(new $Generated_SetupSupport0(variance)));");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("return components;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public static class $Generated_SetupSupport0 implements SupportFactor.Support {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("private final Supplier<Real> variance;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("public $Generated_SetupSupport0(final Supplier<Real> variance) {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("this.variance = variance;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("@Override");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("public boolean inSupport() {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("return $inSupport(variance.get());");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("private boolean $inSupport(final Real variance) {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("double _doubleValue = variance.doubleValue();");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("return (_doubleValue > 0);");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void supportFactorMultiParam() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("param Real mean");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("param Real variance");
      _builder.newLine();
      _builder.append("    ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("laws {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("indicator(mean, variance) = { mean.doubleValue > 0.5 && variance.doubleValue > 0 }");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("import blang.core.Model;");
      _builder_1.newLine();
      _builder_1.append("import blang.core.ModelComponent;");
      _builder_1.newLine();
      _builder_1.append("import blang.core.SupportFactor;");
      _builder_1.newLine();
      _builder_1.append("import blang.prototype3.Real;");
      _builder_1.newLine();
      _builder_1.append("import java.util.ArrayList;");
      _builder_1.newLine();
      _builder_1.append("import java.util.Collection;");
      _builder_1.newLine();
      _builder_1.append("import java.util.function.Supplier;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("@SuppressWarnings(\"all\")");
      _builder_1.newLine();
      _builder_1.append("public class MyFile implements Model {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public final Supplier<Real> mean;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public final Supplier<Real> variance;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public MyFile(final Supplier<Real> mean, final Supplier<Real> variance) {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("this.mean = mean;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("this.variance = variance;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public Collection<ModelComponent> components() {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("ArrayList<ModelComponent> components = new ArrayList();");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("components.add(new SupportFactor(new $Generated_SetupSupport0(mean, variance)));");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("return components;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public static class $Generated_SetupSupport0 implements SupportFactor.Support {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("private final Supplier<Real> mean;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("private final Supplier<Real> variance;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("public $Generated_SetupSupport0(final Supplier<Real> mean, final Supplier<Real> variance) {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("this.mean = mean;");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("this.variance = variance;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("@Override");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("public boolean inSupport() {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("return $inSupport(mean.get(), variance.get());");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("private boolean $inSupport(final Real mean, final Real variance) {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("boolean _and = false;");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("double _doubleValue = mean.doubleValue();");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("boolean _greaterThan = (_doubleValue > 0.5);");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("if (!_greaterThan) {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("_and = false;");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("} else {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("double _doubleValue_1 = variance.doubleValue();");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("boolean _greaterThan_1 = (_doubleValue_1 > 0);");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("_and = _greaterThan_1;");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("return _and;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void simpleNormalModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("random Real mu");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("random Real y");
      _builder.newLine();
      _builder.append("    ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("laws {");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("y | Real mean = mu ~ Normal(mean, [mean.doubleValue ** 2])");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("import blang.core.Model;");
      _builder_1.newLine();
      _builder_1.append("import blang.core.ModelComponent;");
      _builder_1.newLine();
      _builder_1.append("import blang.prototype3.Real;");
      _builder_1.newLine();
      _builder_1.append("import java.util.ArrayList;");
      _builder_1.newLine();
      _builder_1.append("import java.util.Collection;");
      _builder_1.newLine();
      _builder_1.append("import java.util.function.Supplier;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("@SuppressWarnings(\"all\")");
      _builder_1.newLine();
      _builder_1.append("public class MyFile implements Model {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public final Real mu;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public final Real y;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public MyFile(final Real mu, final Real y) {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("this.mu = mu;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("this.y = y;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public Collection<ModelComponent> components() {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("ArrayList<ModelComponent> components = new ArrayList();");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("components.add(new Normal(");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("y,");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("new $Generated_SupplierSubModel0Param0(mu),");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("new $Generated_SupplierSubModel0Param1(mu))");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append(");");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("return components;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public static class $Generated_SupplierSubModel0Param0 implements Supplier<Real> {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("private final Real mean;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("public $Generated_SupplierSubModel0Param0(final Real mean) {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("this.mean = mean;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("@Override");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("public Real get() {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("return mean;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public static class $Generated_SupplierSubModel0Param1 implements Supplier<Real> {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("private final Real mean;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("public $Generated_SupplierSubModel0Param1(final Real mean) {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("this.mean = mean;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("@Override");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("public Real get() {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("final Real _function = new Real() {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("public double doubleValue() {");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("double _doubleValue = $Generated_SupplierSubModel0Param1.this.mean.doubleValue();");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("return Math.pow(_doubleValue, 2);");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("};");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("return _function;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
