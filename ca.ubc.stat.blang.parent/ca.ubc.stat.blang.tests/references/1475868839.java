import blang.core.IntVar;
import blang.core.LogScaleFactor;
import blang.core.Model;
import blang.core.ModelBuilder;
import blang.core.ModelComponents;
import blang.core.RealVar;
import ca.ubc.stat.blang.StaticJavaUtils;
import java.util.List;
import java.util.function.Function;

@SuppressWarnings("all")
public class MyFile implements Model {
  public static class Builder implements ModelBuilder {
    public MyFile build() {
      // For each optional type, either get the value, or evaluate the ?: expression
      // Build the instance after boxing params
      return new MyFile(
      );
    }
  }
  
  /**
   * Utility main method for posterior inference on this model
   */
  public static void main(final String[] arguments) {
    StaticJavaUtils.callRunner(Builder.class, arguments);
  }
  
  /**
   * Auxiliary method generated to translate:
   * { val Function<Double,Double> d2d = null val Function<Integer,Integer> i2i = null val RealVar rv = null val IntVar iv = null val List<Object> list = null d2d.apply(rv) d2d.apply(iv) i2i.apply(iv) Math.log(rv) Math.log(iv) list.get(iv) val RealVar v0 = 0.0 val RealVar v1 = new Double(0.0) val IntVar v2 = 0 val RealVar v3 = 0 val IntVar v4 = new Integer(0) val RealVar v4 = new Integer(0) return Double.NaN }
   */
  private static Double $generated__0() {
    final Function<Double, Double> d2d = null;
    final Function<Integer, Integer> i2i = null;
    final RealVar rv = null;
    final IntVar iv = null;
    final List<Object> list = null;
    d2d.apply((rv).doubleValue());
    d2d.apply((iv).intValue());
    i2i.apply((iv).intValue());
    Math.log((rv).doubleValue());
    Math.log((iv).intValue());
    list.get((iv).intValue());
    final RealVar v0 = () -> (0.0);
    final RealVar v1 = () -> (new Double(0.0));
    final IntVar v2 = () -> (0);
    final RealVar v3 = () -> (0);
    final IntVar v4 = () -> (new Integer(0));
    final RealVar v4_1 = () -> (new Integer(0));
    return Double.valueOf(Double.NaN);
  }
  
  /**
   * Auxiliary method generated to translate:
   * { val Function<Double,Double> d2d = null val Function<Integer,Integer> i2i = null val RealVar rv = null val IntVar iv = null val List<Object> list = null d2d.apply(rv) d2d.apply(iv) i2i.apply(iv) Math.log(rv) Math.log(iv) list.get(iv) val RealVar v0 = 0.0 val RealVar v1 = new Double(0.0) val IntVar v2 = 0 val RealVar v3 = 0 val IntVar v4 = new Integer(0) val RealVar v4 = new Integer(0) return Double.NaN }
   */
  private static LogScaleFactor $generated__0_lazy() {
    return () -> $generated__0();
  }
  
  /**
   * Note: the generated code has the following properties used at runtime:
   *   - all arguments are annotated with a BlangVariable annotation
   *   - params additionally have a Param annotation
   *   - the order of the arguments is as follows:
   *     - first, all the random variables in the order they occur in the blang file
   *     - second, all the params in the order they occur in the blang file
   * 
   */
  public MyFile() {
    
  }
  
  /**
   * A component can be either a distribution, support constraint, or another model  
   * which recursively defines additional components.
   */
  public ModelComponents components() {
    ModelComponents components = new ModelComponents();
    
    { // Code generated by: () { val Function<Double,Double> d2d = null val Function<Integer,Integer> i2i = null val RealVar rv = null val IntVar iv = null val List<Object> list = null d2d.apply(rv) d2d.apply(iv) i2i.apply(iv) Math.log(rv) Math.log(iv) list.get(iv) val RealVar v0 = 0.0 val RealVar v1 = new Double(0.0) val IntVar v2 = 0 val RealVar v3 = 0 val IntVar v4 = new Integer(0) val RealVar v4 = new Integer(0) return Double.NaN }
      // Construction and addition of the factor/model:
      components.add(
        $generated__0_lazy(),
        "() { val Function<Double,Double> d2d = null val Function<Integer,Integer> i2i = null val RealVar rv = null val IntVar iv = null val List<Object> list = null d2d.apply(rv) d2d.apply(iv) i2i.apply(iv) Math.log(rv) Math.log(iv) list.get(iv) val RealVar v0 = 0.0 val RealVar v1 = new Double(0.0) val IntVar v2 = 0 val RealVar v3 = 0 val IntVar v4 = new Integer(0) val RealVar v4 = new Integer(0) return Double.NaN }"
      );
    }
    
    return components;
  }
}
