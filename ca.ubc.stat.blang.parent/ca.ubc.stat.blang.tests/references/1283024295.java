import blang.core.DeboxedName;
import blang.core.Model;
import blang.core.ModelBuilder;
import blang.core.ModelComponent;
import blang.core.Param;
import blang.core.RealVar;
import blang.inits.Arg;
import ca.ubc.stat.blang.StaticJavaUtils;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.function.Supplier;
import org.eclipse.xtext.xbase.lib.ExclusiveRange;

@SuppressWarnings("all")
public class MyFile implements Model {
  public static class Builder implements ModelBuilder {
    @Arg
    public RealVar m;
    
    @Arg
    public RealVar v;
    
    @Arg
    public List<RealVar> means;
    
    public MyFile build() {
      // For each optional type, either get the value, or evaluate the ?: expression
      final RealVar __m = m;
      final RealVar __v = v;
      final List<RealVar> __means = means;
      // Build the instance after boxing params
      return new MyFile(
        __means, 
        () -> __m, 
        () -> __v
      );
    }
  }
  
  @Param
  private final Supplier<RealVar> $generated__m;
  
  public RealVar getM() {
    return $generated__m.get();
  }
  
  @Param
  private final Supplier<RealVar> $generated__v;
  
  public RealVar getV() {
    return $generated__v.get();
  }
  
  private final List<RealVar> means;
  
  public List<RealVar> getMeans() {
    return means;
  }
  
  /**
   * Utility main method for posterior inference on this model
   */
  public static void main(final String[] arguments) {
    StaticJavaUtils.callRunner(Builder.class, arguments);
  }
  
  /**
   * Auxiliary method generated to translate:
   * 0..<2
   */
  private static Iterable<Integer> $generated__0(final RealVar m, final RealVar v, final List<RealVar> means) {
    ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, 2, true);
    return _doubleDotLessThan;
  }
  
  /**
   * Auxiliary method generated to translate:
   * means.get(i)
   */
  private static RealVar $generated__1(final int i, final RealVar m, final RealVar v, final List<RealVar> means) {
    RealVar _get = means.get(i);
    return _get;
  }
  
  /**
   * Auxiliary method generated to translate:
   * m
   */
  private static RealVar $generated__2(final RealVar m, final RealVar v) {
    return m;
  }
  
  /**
   * Auxiliary method generated to translate:
   * m
   */
  private static Supplier<RealVar> $generated__2_lazy(final Supplier<RealVar> $generated__m, final Supplier<RealVar> $generated__v) {
    return () -> $generated__2($generated__m.get(), $generated__v.get());
  }
  
  /**
   * Auxiliary method generated to translate:
   * v
   */
  private static RealVar $generated__3(final RealVar m, final RealVar v) {
    return v;
  }
  
  /**
   * Auxiliary method generated to translate:
   * v
   */
  private static Supplier<RealVar> $generated__3_lazy(final Supplier<RealVar> $generated__m, final Supplier<RealVar> $generated__v) {
    return () -> $generated__3($generated__m.get(), $generated__v.get());
  }
  
  /**
   * Note: the generated code has the following properties used at runtime:
   *   - all arguments are annotated with a BlangVariable annotation
   *   - params additionally have a Param annotation
   *   - the order of the arguments is as follows:
   *     - first, all the random variables in the order they occur in the blang file
   *     - second, all the params in the order they occur in the blang file
   * 
   */
  public MyFile(@DeboxedName("means") final List<RealVar> means, @Param @DeboxedName("m") final Supplier<RealVar> $generated__m, @Param @DeboxedName("v") final Supplier<RealVar> $generated__v) {
    this.$generated__m = $generated__m;
    this.$generated__v = $generated__v;
    this.means = means;
  }
  
  /**
   * A component can be either a distribution, support constraint, or another model  
   * which recursively defines additional components.
   */
  public Collection<ModelComponent> components() {
    ArrayList<ModelComponent> components = new ArrayList();
    
    for (int i : $generated__0($generated__m.get(), $generated__v.get(), means)) {
      { // Code generated by: means.get(i) | m, v ~ new Normal(m, v)
        // Construction and addition of the factor/model:
        components.add(
          new ca.ubc.stat.blang.tests.types.Normal(
            $generated__1(i, $generated__m.get(), $generated__v.get(), means), 
            $generated__2_lazy($generated__m, $generated__v), 
            $generated__3_lazy($generated__m, $generated__v)
          )
        );
      }
    }
    
    return components;
  }
}
