package ca.ubc.stat.blang.tests.generate

import ca.ubc.stat.blang.tests.BlangDslInjectorProvider
import com.google.inject.Inject
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.TemporaryFolder
import org.eclipse.xtext.junit4.XtextRunner
import org.eclipse.xtext.xbase.compiler.CompilationTestHelper
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(XtextRunner)
@InjectWith(BlangDslInjectorProvider)
class LoopGeneratorTest {
    @Inject public TemporaryFolder temporaryFolder
    @Inject extension CompilationTestHelper
        
    
    @Test
    def void forLoop() {
        '''
            model {
                random java.util.Random rand
                
                laws {
                    for (int i : 0..<3) {
                        indicator(rand) = { rand.nextInt(4) > /* i */ 2 }
                    }
                }
            }
        '''.assertCompilesTo(
        '''
        import blang.core.DeboxedName;
        import blang.core.Model;
        import blang.core.ModelComponent;
        import blang.core.SupportFactor;
        import java.util.ArrayList;
        import java.util.Collection;
        import java.util.Random;
        import org.eclipse.xtext.xbase.lib.ExclusiveRange;
        
        @SuppressWarnings("all")
        public class MyFile implements Model {
          private final Random rand;
          
          /**
           * Note: the generated code has the following properties used at runtime:
           *   - all arguments are annotated with with BlangVariable annotation
           *   - params have @Param also
           *   - the order of the arguments is as follows:
           *     - first, all the random variables in the order they occur in the blang file
           *     - second, all the params in the order they occur in the blang file
           * 
           */
          public MyFile(@DeboxedName("rand") final Random rand) {
            this.rand = rand;
          }
          
          /**
           * Auxiliary method generated to translate:
           * 0..<3
           */
          private static Iterable<Integer> $generated__0(final Random rand) {
            ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, 3, true);
            return _doubleDotLessThan;
          }
          
          /**
           * Auxiliary method generated to translate:
           * { rand.nextInt(4) > 2 }
           */
          private static Boolean $generated__1(final Random rand) {
            int _nextInt = rand.nextInt(4);
            return Boolean.valueOf((_nextInt > 2));
          }
          
          /**
           * Auxiliary method generated to translate:
           * { rand.nextInt(4) > 2 }
           */
          private static SupportFactor $generated__1_lazy(final Random rand) {
            return new SupportFactor(() -> $generated__1(rand));
          }
          
          /**
           * A component can be either a distribution, support constraint, or another model  
           * which recursively defines additional components.
           */
          public Collection<ModelComponent> components() {
            ArrayList<ModelComponent> components = new ArrayList();
            
            for (int i : $generated__0(rand)) {
              { // Code generated by: (rand) = { rand.nextInt(4) > 2 }
                // Construction and addition of the factor/model:
                components.add(
                  $generated__1_lazy(rand)
                );
              }
            }
            
            return components;
          }
        }
        '''
        )
    }
    
    @Test
    def void nestedForLoops() {
        '''
            model {
                random java.util.Random rand
                
                laws {
                    for (int i : 0..<3) {
                        for (int j : 0..<3) {
                            indicator(rand) = { rand.nextInt(4) > /* i + j */ 1 + 2 }
                        }
                    }
                }
            }
        '''.assertCompilesTo(
        '''
        import blang.core.DeboxedName;
        import blang.core.Model;
        import blang.core.ModelComponent;
        import blang.core.SupportFactor;
        import java.util.ArrayList;
        import java.util.Collection;
        import java.util.Random;
        import org.eclipse.xtext.xbase.lib.ExclusiveRange;
        
        @SuppressWarnings("all")
        public class MyFile implements Model {
          private final Random rand;
          
          /**
           * Note: the generated code has the following properties used at runtime:
           *   - all arguments are annotated with with BlangVariable annotation
           *   - params have @Param also
           *   - the order of the arguments is as follows:
           *     - first, all the random variables in the order they occur in the blang file
           *     - second, all the params in the order they occur in the blang file
           * 
           */
          public MyFile(@DeboxedName("rand") final Random rand) {
            this.rand = rand;
          }
          
          /**
           * Auxiliary method generated to translate:
           * 0..<3
           */
          private static Iterable<Integer> $generated__0(final Random rand) {
            ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, 3, true);
            return _doubleDotLessThan;
          }
          
          /**
           * Auxiliary method generated to translate:
           * 0..<3
           */
          private static Iterable<Integer> $generated__1(final int i, final Random rand) {
            ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, 3, true);
            return _doubleDotLessThan;
          }
          
          /**
           * Auxiliary method generated to translate:
           * { rand.nextInt(4) > 1 + 2 }
           */
          private static Boolean $generated__2(final Random rand) {
            int _nextInt = rand.nextInt(4);
            return Boolean.valueOf((_nextInt > (1 + 2)));
          }
          
          /**
           * Auxiliary method generated to translate:
           * { rand.nextInt(4) > 1 + 2 }
           */
          private static SupportFactor $generated__2_lazy(final Random rand) {
            return new SupportFactor(() -> $generated__2(rand));
          }
          
          /**
           * A component can be either a distribution, support constraint, or another model  
           * which recursively defines additional components.
           */
          public Collection<ModelComponent> components() {
            ArrayList<ModelComponent> components = new ArrayList();
            
            for (int i : $generated__0(rand)) {
              for (int j : $generated__1(i, rand)) {
                { // Code generated by: (rand) = { rand.nextInt(4) > 1 + 2 }
                  // Construction and addition of the factor/model:
                  components.add(
                    $generated__2_lazy(rand)
                  );
                }
              }
            }
            
            return components;
          }
        }
        ''')
    }
    
    @Test
    def void simpleNormalModel() {
        '''
            import ca.ubc.stat.blang.tests.types.Real
            
            model {
                random Real mu
                random Real y
                
                laws {
                    for (int i : 0..<2) {
                        y | Real mean = mu ~ Normal(mean, [mean.doubleValue ** 2])
                    }
                }
            }
        '''.assertCompilesTo(
        '''
        import blang.core.Model;
        import blang.core.ModelComponent;
        import ca.ubc.stat.blang.tests.types.Real;
        import java.util.ArrayList;
        import java.util.Collection;
        import java.util.function.Supplier;
        
        @SuppressWarnings("all")
        public class MyFile implements Model {
          public final Real mu;
          
          public final Real y;
          
          public MyFile(final Real mu, final Real y) {
            this.mu = mu;
            this.y = y;
          }
          
          public Collection<ModelComponent> components() {
            ArrayList<ModelComponent> components = new ArrayList();
            
            for (int i = 0; i < 4; i++) {
              components.add(new blang.prototype3.Normal(
                  y,
                  new $Generated_SupplierSubModel0Param0(mu, i),
                  new $Generated_SupplierSubModel0Param1(mu, i))
              );
            }
            
            return components;
          }
          
          public static class $Generated_SupplierSubModel0Param0 implements Supplier<Real> {
            private final Real mean;
            
            private final int i;
            
            public $Generated_SupplierSubModel0Param0(final Real mean, final int i) {
              this.mean = mean;
              this.i = i;
            }
            
            @Override
            public Real get() {
              return mean;
            }
          }
          
          public static class $Generated_SupplierSubModel0Param1 implements Supplier<Real> {
            private final Real mean;
            
            private final int i;
            
            public $Generated_SupplierSubModel0Param1(final Real mean, final int i) {
              this.mean = mean;
              this.i = i;
            }
            
            @Override
            public Real get() {
              final Real _function = new Real() {
                public double doubleValue() {
                  double _doubleValue = $Generated_SupplierSubModel0Param1.this.mean.doubleValue();
                  return Math.pow(_doubleValue, 2);
                }
              };
              return _function;
            }
          }
        }
        ''' 
        )
    }
    
}
