/**
 * generated by Xtext 2.9.1
 */
package ca.ubc.stat.blang.jvmmodel;

import blang.core.Model;
import blang.core.ModelComponent;
import ca.ubc.stat.blang.blangDsl.BlangModel;
import ca.ubc.stat.blang.blangDsl.Random;
import ca.ubc.stat.blang.blangDsl.Vars;
import com.google.common.base.Objects;
import com.google.inject.Inject;
import java.util.Arrays;
import java.util.Collection;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenationClient;
import org.eclipse.xtext.common.types.JvmConstructor;
import org.eclipse.xtext.common.types.JvmDeclaredType;
import org.eclipse.xtext.common.types.JvmField;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericType;
import org.eclipse.xtext.common.types.JvmMember;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.common.types.JvmVisibility;
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer;
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor;
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

/**
 * <p>Infers a JVM model from the source model.</p>
 * 
 * <p>The JVM model should contain all elements that would appear in the Java code
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>
 */
@SuppressWarnings("all")
public class BlangDslJvmModelInferrer extends AbstractModelInferrer {
  /**
   * convenience API to build and initialize JVM types and their members.
   */
  @Inject
  @Extension
  private JvmTypesBuilder _jvmTypesBuilder;
  
  /**
   * The dispatch method {@code infer} is called for each instance of the
   * given element's type that is contained in a resource.
   * 
   * @param element
   *            the model to create one or more
   *            {@link JvmDeclaredType declared
   *            types} from.
   * @param acceptor
   *            each created
   *            {@link JvmDeclaredType type}
   *            without a container should be passed to the acceptor in order
   *            get attached to the current resource. The acceptor's
   *            {@link IJvmDeclaredTypeAcceptor#accept(org.eclipse.xtext.common.types.JvmDeclaredType)
   *            accept(..)} method takes the constructed empty type for the
   *            pre-indexing phase. This one is further initialized in the
   *            indexing phase using the closure you pass to the returned
   *            {@link IPostIndexingInitializing#initializeLater(org.eclipse.xtext.xbase.lib.Procedures.Procedure1)
   *            initializeLater(..)}.
   * @param isPreIndexingPhase
   *            whether the method is called in a pre-indexing phase, i.e.
   *            when the global index is not yet fully updated. You must not
   *            rely on linking using the index if isPreIndexingPhase is
   *            <code>true</code>.
   */
  protected void _infer(final BlangModel model, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    Resource _eResource = model.eResource();
    URI _uRI = _eResource.getURI();
    URI _trimFileExtension = _uRI.trimFileExtension();
    final String className = _trimFileExtension.lastSegment();
    JvmGenericType _class = this._jvmTypesBuilder.toClass(model, className);
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      String _name = model.getName();
      boolean _notEquals = (!Objects.equal(_name, null));
      if (_notEquals) {
        String _name_1 = model.getName();
        it.setPackageName(_name_1);
      }
      EList<JvmTypeReference> _superTypes = it.getSuperTypes();
      JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(Model.class);
      this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, _typeRef);
      Vars _vars = model.getVars();
      boolean _notEquals_1 = (!Objects.equal(_vars, null));
      if (_notEquals_1) {
        Vars _vars_1 = model.getVars();
        EList<Random> _randomVars = _vars_1.getRandomVars();
        for (final Random varDecl : _randomVars) {
          EList<JvmMember> _members = it.getMembers();
          String _name_2 = varDecl.getName();
          JvmTypeReference _type = varDecl.getType();
          final Procedure1<JvmField> _function_1 = (JvmField it_1) -> {
            it_1.setVisibility(JvmVisibility.PUBLIC);
            it_1.setFinal(true);
          };
          JvmField _field = this._jvmTypesBuilder.toField(varDecl, _name_2, _type, _function_1);
          this._jvmTypesBuilder.<JvmField>operator_add(_members, _field);
        }
      }
      boolean _and = false;
      Vars _vars_2 = model.getVars();
      EList<Random> _randomVars_1 = null;
      if (_vars_2!=null) {
        _randomVars_1=_vars_2.getRandomVars();
      }
      boolean _notEquals_2 = (!Objects.equal(_randomVars_1, null));
      if (!_notEquals_2) {
        _and = false;
      } else {
        Vars _vars_3 = model.getVars();
        EList<Random> _randomVars_2 = _vars_3.getRandomVars();
        boolean _isEmpty = _randomVars_2.isEmpty();
        boolean _not = (!_isEmpty);
        _and = _not;
      }
      if (_and) {
        EList<JvmMember> _members_1 = it.getMembers();
        final Procedure1<JvmConstructor> _function_2 = (JvmConstructor it_1) -> {
          it_1.setVisibility(JvmVisibility.PUBLIC);
          Vars _vars_4 = model.getVars();
          EList<Random> _randomVars_3 = null;
          if (_vars_4!=null) {
            _randomVars_3=_vars_4.getRandomVars();
          }
          for (final Random varDecl_1 : _randomVars_3) {
            EList<JvmFormalParameter> _parameters = it_1.getParameters();
            String _name_3 = varDecl_1.getName();
            JvmTypeReference _type_1 = varDecl_1.getType();
            JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(varDecl_1, _name_3, _type_1);
            this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
          }
          StringConcatenationClient _client = new StringConcatenationClient() {
            @Override
            protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
              {
                Vars _vars = model.getVars();
                EList<Random> _randomVars = null;
                if (_vars!=null) {
                  _randomVars=_vars.getRandomVars();
                }
                for(final Random varDecl : _randomVars) {
                  _builder.append("this.");
                  String _name = varDecl.getName();
                  _builder.append(_name, "");
                  _builder.append(" = ");
                  String _name_1 = varDecl.getName();
                  _builder.append(_name_1, "");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          };
          this._jvmTypesBuilder.setBody(it_1, _client);
        };
        JvmConstructor _constructor = this._jvmTypesBuilder.toConstructor(model, _function_2);
        this._jvmTypesBuilder.<JvmConstructor>operator_add(_members_1, _constructor);
      }
      EList<JvmMember> _members_2 = it.getMembers();
      JvmTypeReference _typeRef_1 = this._typeReferenceBuilder.typeRef(ModelComponent.class);
      JvmTypeReference _typeRef_2 = this._typeReferenceBuilder.typeRef(Collection.class, _typeRef_1);
      final Procedure1<JvmOperation> _function_3 = (JvmOperation it_1) -> {
        it_1.setVisibility(JvmVisibility.PUBLIC);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("java.util.ArrayList<blang.core.ModelComponent> components = new java.util.ArrayList();");
            _builder.newLine();
            _builder.newLine();
            _builder.newLine();
            _builder.newLine();
            _builder.append("return components;");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method = this._jvmTypesBuilder.toMethod(model, "components", _typeRef_2, _function_3);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, _method);
    };
    acceptor.<JvmGenericType>accept(_class, _function);
  }
  
  public void infer(final EObject model, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    if (model instanceof BlangModel) {
      _infer((BlangModel)model, acceptor, isPreIndexingPhase);
      return;
    } else if (model != null) {
      _infer(model, acceptor, isPreIndexingPhase);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(model, acceptor, isPreIndexingPhase).toString());
    }
  }
}
