grammar ca.ubc.stat.blang.BlangDsl with org.eclipse.xtext.xbase.Xbase

generate blangDsl "http://www.ubc.ca/stat/blang/BlangDsl"

BlangModel:
	{BlangModel}
	('package' packageName=QualifiedName)?
	importSection=XImportSection?
	'model' '{'
		(variableDeclarations += VariableDeclaration)*
		'laws' '{' (lawNodes += LawNode)* '}'
		(variableDeclarations += VariableDeclaration)*
	'}'
	;
	
VariableDeclaration:
	(variableType = ('random' | 'param')) type=JvmTypeReference name=ValidID
;

LawNode:
  'for' ForLoop | 'indicator' IndicatorDeclaration | 'logf' LogScaleFactorDeclaration | => InstantiatedDistribution
;

IndicatorDeclaration:
  {IndicatorDeclaration}
  contents=FactorDeclaration
;

LogScaleFactorDeclaration:
  {LogScaleFactorDeclaration}
  contents=FactorDeclaration
;

ForLoop:
  '('
    iteratorType = JvmTypeReference
    iteratorName = ValidID
    ':'
    iteratorRange = XExpression
  ')' '{'
    (loopBody += LawNode)*
  '}'
;

// indicator(variance) = variance.doubleValue > 0
FactorDeclaration:
  '(' ((dependencies += Dependency) (',' dependencies += Dependency)* )? ')' 
  '=' (factorBody = XBlockExpression)
;

// y1, y2 | Matrix mean = means.get(z), variance ~ BivariateNormal(mean, [variance ** 2])
InstantiatedDistribution:
  // random variables generated
	( generatedVariables += XExpression  (',' generatedVariables += XExpression)* )?
	// dependencies on other variables
	('|' (dependencies += Dependency) (',' dependencies += Dependency)* )?  
	// type of the distribution
	'~' distributionType = JvmTypeReference 
	// arguments in the constructor of the distribution
	'('
	  ( (arguments += XExpression) ( ',' arguments += XExpression)* )?
	')'
;

Dependency:
  SimpleDependency | InitializerDependency
;

InitializerDependency:
	(type = JvmTypeReference) (name = ValidID) '=' (init = ValidID)
;

SimpleDependency:
  name = ValidID
;
