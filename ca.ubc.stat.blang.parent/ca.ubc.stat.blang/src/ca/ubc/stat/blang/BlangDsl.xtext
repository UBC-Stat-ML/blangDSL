grammar ca.ubc.stat.blang.BlangDsl with org.eclipse.xtext.xbase.Xbase

generate blangDsl "http://www.ubc.ca/stat/blang/BlangDsl"

BlangModel:
	{BlangModel}
	('package' name=QualifiedName)?
	importSection=XImportSection?
	('model' '{'
		((vars += ModelVar) | (consts += Const))*
		laws = Laws?
	'}')?
	;
	
ModelVar:
	(qualType = ('random' | 'param')) type=JvmTypeReference name=ValidID
;

Const:
    'const' type=JvmTypeReference name=ValidID '=' right=XExpression
;

VarDecl:
	type=JvmTypeReference? name=ValidID '=' right=XExpression
;

Laws:
	{Laws}
	'laws' '{'
	(modelComponents += ModelComponent)*
	'}'
;

ModelComponent:
    ForLoop | SupportFactor | LogScaleFactor | ModelParam
;

ForLoop:
    {ForLoop}
    'for' '('
        (initExpression=VarDecl) ';'
        (testExpression=XExpression) ';'
        (updateExpression=XExpression)
    ')' '{'
        (body += ModelComponent)*
    '}'
;

// indicator(variance) = variance.doubleValue > 0
SupportFactor:
    'indicator' '(' (params += ValidID) (',' (params += ValidID))* ')' '=' (expr = XBlockExpression)
;

// logf(variance) = -0.5 * ( log(variance.doubleValue) + LOG2PI )
LogScaleFactor:
    'logf' '(' (params += ValidID) (',' (params += ValidID))* ')' '=' (expr = XBlockExpression)
;

// y | Real mean = mu ~ Normal(mean, [mean.doubleValue ** 2])
ModelParam:
	(name = ValidID) '|' (deps += Dependency) + '~' (right = Distribution)
;

Dependency:
	(type = JvmTypeReference) (name = ValidID) '=' (init = ValidID)
;

Distribution:
	(clazz = JvmTypeReference) '('
		( (param += Param) ( ',' param += Param)* )?
		')'
;

Param:
	LazyParam | ConstParam
;

ConstParam:
    id = ValidID
;

LazyParam:
	expr = XClosure
;
