grammar ca.ubc.stat.blang.BlangDsl with org.eclipse.xtext.xbase.annotations.XbaseWithAnnotations

generate blangDsl "http://www.ubc.ca/stat/blang/BlangDsl"

import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes
import "http://www.eclipse.org/Xtext/Xbase/XAnnotations" as xAnnotations

BlangModel:
	{BlangModel}
	('package' package=QualifiedName)?
	importSection=XImportSection?
	(annotations += XAnnotation)*
	'model' name=ID '{'
    (variableDeclarations += VariableDeclaration)*
    'laws' '{' (lawNodes += LawNode)* '}'
    ('generate' '(' generationRandom = ValidID ')' generationAlgorithm = XBlockExpression )?
    (variableDeclarations += VariableDeclaration)*
	'}'
;
	
VariableDeclaration:
  (annotations += XAnnotation)*
	(variableType = VariableType) type=JvmTypeReference ( components += VariableDeclarationComponent) (',' components += VariableDeclarationComponent)*
;

VariableName:
  name = ValidID
;

VariableDeclarationComponent:
  name = VariableName
  ('?:' varInitBlock = XExpression)?
;

enum VariableType:   
  RANDOM = 'random' | PARAM = 'param'
;

LawNode:
  'for' ForLoop | 'if' IfElse | 'indicator' IndicatorDeclaration | 'logf' LogScaleFactorDeclaration | (=> InstantiatedDistribution)
;

IndicatorDeclaration:
  {IndicatorDeclaration}
  contents=FactorDeclaration
;

LogScaleFactorDeclaration:
  {LogScaleFactorDeclaration}
  contents=FactorDeclaration
;

ForLoop:
  '('
    iteratorType = JvmTypeReference
    name = VariableName
    ':'
    iteratorRange = XExpression
  ')' '{'
    (loopBody += LawNode)*
  '}'
;

IfElse:
  '('
    condition = XExpression
  ')' '{'
    (ifBody += LawNode)*
  '}' 
  (
    'else' '{'
      (elseBody += LawNode)*
    '}'
  )?
;

// e.g.: indicator(variance) = variance.doubleValue > 0
FactorDeclaration:
  '(' ((dependencies += Dependency) ((','|';') dependencies += Dependency)* )? ')' 
  (factorBody = XBlockExpression)
;

// e.g.: y1, y2 | Matrix mean = means.get(z), variance ~ BivariateNormal(mean, [variance ** 2])
InstantiatedDistribution:
  // random variables generated
	( generatedVariables += XExpression  (',' generatedVariables += XExpression)* )?
	// dependencies on other variables
	('|' (dependencies += Dependency) (',' dependencies += Dependency)* )?  
	// type of the distribution
	typeSpec = DistributionTypeSpecification //distributionType = [BlangModel|QualifiedName] 
	// arguments in the constructor of the distribution
  (=> explicitArguments ?=
    '('
      ( (arguments += XExpression) ( ',' arguments += XExpression)* )?
    ')'
  )?	
;

DistributionTypeSpecification:
  'is' JavaDist | 
  '~' BlangDist | // UTF-8: 7E
  'âˆ¼' BlangDist   // UTF-8: E2 88 BC (This caused problems in 302 assignments)
;

BlangDist:
  distributionType = [BlangModel|QualifiedName]
;

JavaDist:
  distributionType = JvmTypeReference
;

Dependency:
  InitializerDependency | SimpleDependency
;

InitializerDependency:
	(type = JvmTypeReference) (name = ValidID) '=' (init = XExpression)
;

SimpleDependency:
  variable = [VariableName]
;
